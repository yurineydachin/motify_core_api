// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package log

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD7b6309cDecodeGoLog(in *jlexer.Lexer, out *additionalDataStringString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(additionalDataStringString)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 string
			v1 = string(in.String())
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7b6309cEncodeGoLog(out *jwriter.Writer, in additionalDataStringString) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			out.String(string(v2Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v additionalDataStringString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7b6309cEncodeGoLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v additionalDataStringString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7b6309cEncodeGoLog(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *additionalDataStringString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7b6309cDecodeGoLog(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *additionalDataStringString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7b6309cDecodeGoLog(l, v)
}
func easyjsonD7b6309cDecodeGoLog1(in *jlexer.Lexer, out *additionalDataStringInterface) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(additionalDataStringInterface)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v3 interface{}
			v3 = in.Interface()
			(*out)[key] = v3
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD7b6309cEncodeGoLog1(out *jwriter.Writer, in additionalDataStringInterface) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in {
			if !v4First {
				out.RawByte(',')
			}
			v4First = false
			out.String(string(v4Name))
			out.RawByte(':')
			if v, ok := v4Value.(string); ok {
				out.String(string(v))
			} else if m, ok := v4Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v4Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v4Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v additionalDataStringInterface) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD7b6309cEncodeGoLog1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v additionalDataStringInterface) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD7b6309cEncodeGoLog1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *additionalDataStringInterface) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD7b6309cDecodeGoLog1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *additionalDataStringInterface) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD7b6309cDecodeGoLog1(l, v)
}
