// It's autogenerated file. It's not recommended to modify it.
package client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"runtime"
	"strings"
	"time"
)

type IBalancer interface {
	Next() (string, error)
}

type Callbacks struct {
	OnStart          func(ctx context.Context, req *http.Request)
	OnFinish         func(ctx context.Context, req *http.Request, startTime time.Time)
	OnError          func(ctx context.Context, req *http.Request, err error)
	OnPanic          func(ctx context.Context, req *http.Request, r interface{}, trace []byte)
	OnPrepareRequest func(ctx context.Context, req *http.Request)
}

type Example struct {
	client      *http.Client
	serviceName string
	balancer    IBalancer
	callbacks   Callbacks
}

func NewExample(client *http.Client, balancer IBalancer, callbacks Callbacks) *Example {
	if client == nil {
		client = http.DefaultClient
	}
	return &Example{
		//		client: &http.Client{
		//			Transport: &http.Transport{
		//				//DisableCompression: true,
		//				MaxIdleConnsPerHost: 20,
		//			},
		//			Timeout: apiTimeout,
		//		},
		serviceName: "Example",
		balancer:    balancer,
		callbacks:   callbacks,
		client:      client,
	}
}

func (api *Example) TestHandler1V1(ctx context.Context, options TestHandler1V1Args) (*TestHandler1V1Res, error) {
	var result *TestHandler1V1Res
	err := api.set(ctx, "/test/handler1/v1/", options, &result, nil)
	return result, err
}

func (api *Example) TestHandler1V2(ctx context.Context, options TestHandler1V2Args) (*TestHandler1V2Res, error) {
	var result *TestHandler1V2Res
	err := api.set(ctx, "/test/handler1/v2/", options, &result, _TestHandler1V2ErrorsMapping)
	return result, err
}

func (api *Example) TestHandler1V3(ctx context.Context, options TestHandler1V3Request) (*TestHandler1V3Response, error) {
	var result *TestHandler1V3Response
	err := api.set(ctx, "/test/handler1/v3/", options, &result, nil)
	return result, err
}

type TestHandler1V1Args struct {
	ReqInt int `json:"req_int"`
	Int    int `json:"int"`
}

type TestHandler1V1Res struct {
	String string `json:"string"`
	Int    int    `json:"int"`
}

type TestHandler1V2Args struct {
	ReqInt        int `json:"req_int"`
	ReturnErrorID int `json:"error_id"`
}

type TestHandler1V2Res struct {
	Int int `json:"int"`
}

type TestHandler1V2Errors int

const (
	TestHandler1V2Errors_ERROR_TYPE1 = iota
	TestHandler1V2Errors_ERROR_TYPE2
	TestHandler1V2Errors_ERROR_TYPE3
)

var _TestHandler1V2ErrorsMapping = map[string]int{
	"ERROR_TYPE1": TestHandler1V2Errors_ERROR_TYPE1,
	"ERROR_TYPE2": TestHandler1V2Errors_ERROR_TYPE2,
	"ERROR_TYPE3": TestHandler1V2Errors_ERROR_TYPE3,
}

type TestHandler1V3Request struct {
	ReqInt      int                               `json:"req_int"`
	Nested      TestHandler1V3Nested              `json:"nested"`
	Optional    TestHandler1V3Optional            `json:"optional,omitempty"`
	StringMap   map[string]string                 `json:"strings"`
	StringSlice []string                          `json:"slices"`
	ObjMap      map[string]TestHandler1V3Optional `json:"obj_map"`
	ObjSlice    []TestHandler1V3Optional          `json:"obj_slice"`
	Recursive   TestHandler1V3Recursive1          `json:"recursive,omitempty"`
}

type TestHandler1V3Nested struct {
	ReturnErrorID int `json:"error_id,omitempty"`
}

type TestHandler1V3Optional struct {
	Foo bool `json:"foo"`
}

type TestHandler1V3Recursive1 struct {
	Recursive []TestHandler1V3Recursive2 `json:"recursive,omitempty"`
}

type TestHandler1V3Recursive2 struct {
	Time      TimeDuration             `json:"time,omitempty"`
	Recursive TestHandler1V3Recursive1 `json:"recursive,omitempty"`
}

type TimeDuration int64

type TestHandler1V3Response struct {
	Int int  `json:"int"`
	B   bool `json:"b,omitempty"`
}

// TODO: duplicates http_json.httpSessionResponse
type httpSessionResponse struct {
	Result string          `json:"result"` //OK or ERROR
	Data   json.RawMessage `json:"data"`
	Error  string          `json:"error"`
}

func (api *Example) set(ctx context.Context, path string, data interface{}, buf interface{}, handlerErrors map[string]int) (err error) {
	startTime := time.Now()

	var apiURL string
	var req *http.Request

	if api.callbacks.OnStart != nil {
		api.callbacks.OnStart(ctx, req)
	}

	if api.callbacks.OnFinish != nil {
		defer api.callbacks.OnFinish(ctx, req, startTime)
	}

	defer func() {
		if r := recover(); r != nil {
			const size = 64 << 10
			buf := make([]byte, size)
			n := runtime.Stack(buf, false)
			trace := buf[:n]

			err = fmt.Errorf("panic while calling %q service: %v", api.serviceName, r)
			if api.callbacks.OnPanic != nil {
				api.callbacks.OnPanic(ctx, req, r, trace)
			}
		}
	}()

	apiURL, err = api.balancer.Next()
	if err != nil {
		if api.callbacks.OnError != nil {
			api.callbacks.OnError(ctx, req, err)
		}
		return err
	}

	b := bytes.NewBuffer(nil)
	encoder := json.NewEncoder(b)
	if err := encoder.Encode(data); err != nil {
		err = fmt.Errorf("could not marshal data %+v: %v", data, err)
		if api.callbacks.OnError != nil {
			api.callbacks.OnError(ctx, req, err)
		}
		return err
	}

	req, err = http.NewRequest("POST", createRawURL(apiURL, path, nil), b)
	if err != nil {
		if api.callbacks.OnError != nil {
			api.callbacks.OnError(ctx, req, err)
		}
		return err
	}
	req.Header.Set("Content-Type", "application/json")
	if api.callbacks.OnPrepareRequest != nil {
		api.callbacks.OnPrepareRequest(ctx, req)
	}

	if err := doRequest(api.client, req, buf, handlerErrors); err != nil {
		if api.callbacks.OnError != nil {
			api.callbacks.OnError(ctx, req, err)
		}
		return err
	}

	return nil
}

func createRawURL(url, path string, values url.Values) string {
	var buf bytes.Buffer
	buf.WriteString(strings.TrimRight(url, "/"))
	//buf.WriteRune('/')
	//buf.WriteString(strings.TrimLeft(path, "/"))
	// path must contain leading /
	buf.WriteString(path)
	if len(values) > 0 {
		buf.WriteRune('?')
		buf.WriteString(values.Encode())
	}
	return buf.String()
}

func doRequest(client *http.Client, request *http.Request, buf interface{}, handlerErrors map[string]int) error {
	// Run
	response, err := client.Do(request)
	if err != nil {
		return err
	}
	defer response.Body.Close()

	// Handle error
	if response.StatusCode != http.StatusOK {
		switch response.StatusCode {
		// TODO separate error types for different status codes (and different callbacks)
		/*
		   case http.StatusForbidden:
		   case http.StatusBadGateway:
		   case http.StatusBadRequest:
		*/
		default:
			return fmt.Errorf("Request %q failed. Server returns status code %d", request.URL.RequestURI(), response.StatusCode)
		}
	}

	// Read response
	result, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return err
	}

	var mainResp httpSessionResponse
	if err := json.Unmarshal(result, &mainResp); err != nil {
		return fmt.Errorf("request %q failed to decode response %q: %v", request.URL.RequestURI(), string(result), err)
	}

	if mainResp.Result == "OK" {
		if err := json.Unmarshal(mainResp.Data, buf); err != nil {
			return fmt.Errorf("request %q failed to decode response data %+v: %v", request.URL.RequestURI(), mainResp.Data, err)
		}
		return nil
	}

	if mainResp.Result == "ERROR" {
		errCode, ok := handlerErrors[mainResp.Error]
		if ok {
			return &ServiceError{
				Code:    errCode,
				Message: mainResp.Error,
			}
		}
	}

	return fmt.Errorf("request %q returned incorrect response %q", request.URL.RequestURI(), string(result))
}

// ServiceError uses to separate critical and non-critical errors which returns in external service response.
// For this type of error we shouldn't use 500 error counter for librato
type ServiceError struct {
	Code    int
	Message string
}

// Error method for implementing common error interface
func (err *ServiceError) Error() string {
	return err.Message
}
